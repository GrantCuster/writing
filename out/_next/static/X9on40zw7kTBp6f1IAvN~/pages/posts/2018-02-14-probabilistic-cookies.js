(window.webpackJsonp=window.webpackJsonp||[]).push([["69a7"],{CFoK:function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/posts/2018-02-14-probabilistic-cookies",function(){var e=a("zBel");return{page:e.default||e}}])},zBel:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",function(){return s}),a.d(t,"default",function(){return l});var o=a("kOwS"),i=a("qNsG"),n=(a("q1tI"),a("E/Ix")),s={title:"Probabilistic Cookies!",date:"2018-02-14 12:02 -0500",preview_image:"/images/editor_uploads/2018-02-15-204722-IMG_20180208_091928_1200.jpg",feature:!0,published:!0,author:"Ryan Micallef",post_type:"Fast Forward Food Labs",author_link:"https://www.flickr.com/photos/jqpubliq"},r={frontMatter:s},p="wrapper";function l(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(n.b)(p,Object(o.a)({},r,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("p",null,"In the spirit of Valentine's Day, we at Fast Forward Labs thought it would be fun to bake cookies for our sweethearts. Being DIY nerds, we thought we'd math it up a bit."),Object(n.b)("p",null,"We used python to generate probability distributions and matplotlib to check our distributions. Then we wrote a python function to generate a SCAD file defining three-dimensional shapes from the distributions. Using ",Object(n.b)("a",Object(o.a)({parentName:"p"},{href:"http://www.openscad.org/"}),"OpenSCAD"),", an open-source CAD program, we checked the 3D models and exported them to STL files for printing. We used a 5th Generation ",Object(n.b)("a",Object(o.a)({parentName:"p"},{href:"https://www.makerbot.com/replicator/"}),"MakerBot Replicator")," to print our 3D models. And we baked cookies. Here's one of our office dogs (and my best friend), Dogface, admiring the results."),Object(n.b)("p",null,Object(n.b)("img",Object(o.a)({parentName:"p"},{src:"/images/editor_uploads/2018-02-15-204703-DogfaceWithCookies1200.jpg",alt:null}))),Object(n.b)("p",null,"There were a number of challenges involved in generating 3D models and printing them. Here's how the basic process went."),Object(n.b)("p",null,"We chose a beta distribution for our first prototype because it's well behaved for purposes of making a 3D printed object."),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"A beta distribution only has values from 0 to 1. This gives us a fixed-width shape to work with. (Compare a Gaussian distribution, which has long tails on both sides and thus may not normalize to a good shape across 0 to 1.)"),Object(n.b)("li",{parentName:"ul"},"The area under the curve of a beta distribution is necessarily 1, which helps keep the shape from getting too eccentric while allowing flexibility in choice of parameters, and thus a wider range of shapes."),Object(n.b)("li",{parentName:"ul"},"If you take two beta distributions, put them x-axis to x-axis, and squint, they look a bit like a heart.")),Object(n.b)("p",null,"We created a beta distribution in python."),Object(n.b)("pre",null,Object(n.b)("code",Object(o.a)({parentName:"pre"},{className:"language-python"}),"import numpy as np\nfrom scipy.stats import beta\nimport matplotlib.pyplot as plt\n\n# choose enough points to have a relatively smooth curve without \n# creating so many facets that the 3D printer is slow\n#\n# choose an odd number so there is a definitive peak to the curve\nnumpoints = 35\n\n# set up linspace\nX = np.linspace(0, 1, numpoints)\n\n# beta distribution parameters\na, b = 2, 1.6\n\n# get beta distribution array\nbetadist = beta.pdf(X, a, b)\n")),Object(n.b)("p",null,"And plotted that distribution with some suitable parameters."),Object(n.b)("pre",null,Object(n.b)("code",Object(o.a)({parentName:"pre"},{className:"language-python"}),"# turn off the axes so we only see the curve\nplt.axis('off')\n\n# plot the curve itself\nplt.plot(X, betadist)\n")),Object(n.b)("p",null,Object(n.b)("img",Object(o.a)({parentName:"p"},{src:"/images/editor_uploads/2018-02-15-174748-betadistplot.png",alt:null}))),Object(n.b)("p",null,'Once we found a set of parameters that we liked, we used the points in the distribution in python to create an OpenSCAD-formatted SCAD file. A SCAD file is a readable text file that contains a combination of points in space that define shapes and instructions to manipulate those shapes. We made two 2D copies of the distribution, sized one up a bit, and centered them together. We extruded them both into 3D, one linear, and the other with a slight "cone" projection. This gave us one relatively thin edge for piercing cookie dough. Then we subtracted one shape from the other to make a hollow in the larger shape. Rendered in 3D in OpenSCAD, it looks like this:'),Object(n.b)("p",null,Object(n.b)("img",Object(o.a)({parentName:"p"},{src:"/images/editor_uploads/2018-02-15-175332-SCAD_Beta_with_Taper.png",alt:null}))),Object(n.b)("p",null,"Note that the 3D model looks more eccentric than the python-generated plot. This is because the plot had axes of differing scales."),Object(n.b)("p",null,"With a 3D model in hand, it was time to print a physical object. We exported our SCAD object into a stereolithography (STL) file, which we then imported into ",Object(n.b)("a",Object(o.a)({parentName:"p"},{href:"https://www.makerbot.com/download-print/"}),"MakerBot's printing software"),"."),Object(n.b)("p",null,Object(n.b)("img",Object(o.a)({parentName:"p"},{src:"/images/editor_uploads/2018-02-15-180914-MakerBot_Render.png",alt:null}))),Object(n.b)("p",null,"We made a final print file and extruded our first prototypes at ",Object(n.b)("a",Object(o.a)({parentName:"p"},{href:"http://nycresistor.com"}),"NYC Resistor")," our friendly neighborhood hackerspace. 3D printing can take a while for large shapes, so we started out small."),Object(n.b)("p",null,Object(n.b)("img",Object(o.a)({parentName:"p"},{src:"/images/editor_uploads/2018-02-15-173237-IMG_20180207_154319.jpg",alt:null}))),Object(n.b)("p",null,"Here are the first results (we had begun tinkering with a Gaussian distribution at that point):"),Object(n.b)("p",null,Object(n.b)("img",Object(o.a)({parentName:"p"},{src:"/images/editor_uploads/2018-02-15-204811-IMG_20180205_170725_1200.jpg",alt:null}))),Object(n.b)("p",null,"Of course these first test shapes are too small for cookies. After a lot of tinkering and refinement, we ended up with beta, Gaussian, and Poisson distribution shapes scaled up for cookie size (about 100mm high)."),Object(n.b)("p",null,"We ",Object(n.b)("a",Object(o.a)({parentName:"p"},{href:"http://www.inkatrinaskitchen.com/best-sugar-cookie-recipe-ever/"}),"made some cookie dough")," and got to business."),Object(n.b)("p",null,Object(n.b)("img",Object(o.a)({parentName:"p"},{src:"/images/editor_uploads/2018-02-15-204722-IMG_20180208_091928_1200.jpg",alt:null}))),Object(n.b)("p",null,'Note that the Poisson distribution (printed in white) has big solid areas at the top. This makes it more of a cookie-dough perturber than a cookie cutter. Those solid areas are an artifact of my own ignorance of OpenSCAD. The "clever" OpenSCAD ',Object(n.b)("inlineCode",{parentName:"p"},"scale()")," approach I had been using was a hack; I later learned that the ",Object(n.b)("inlineCode",{parentName:"p"},"offset()")," function is the correct solution."),Object(n.b)("p",null,"OpenSCAD issues aside, the cookies turned out fine. Here are some of the results, some decorated with axes and histograms."),Object(n.b)("p",null,Object(n.b)("img",Object(o.a)({parentName:"p"},{src:"/images/editor_uploads/2018-02-15-204937-IMG_20180208_153153_1200.jpg",alt:null}))),Object(n.b)("p",null,"If you feel inclined to give it a shot yourself, ",Object(n.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/fastforwardlabs/probabilistic-cookie-cutters"}),"here's a jupyter notebook")," with some code to get you started."),Object(n.b)("p",null,"Happy Valentine's Day from Fast Forward Labs!\n"))}l.isMDXComponent=!0}},[["CFoK","5d41","9da1"]]]);