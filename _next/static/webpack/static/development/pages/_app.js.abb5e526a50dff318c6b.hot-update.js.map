{"version":3,"file":"static/webpack/static/development/pages/_app.js.abb5e526a50dff318c6b.hot-update.js","sources":["webpack:///./pages/_app.js"],"sourcesContent":["import App, { Container } from 'next/app'\nimport { PostLayout } from '../parts/Layout'\nimport React from 'react'\nimport { font_size, line_height, font_min, sm } from '../../exp/parts/Static'\nimport { debounce } from 'lodash'\nimport Header from '../parts/Header'\n\n// Override the App class to put layout component around the page contents\n// https://github.com/zeit/next.js#custom-app\n\nexport default class MyApp extends App {\n  constructor(props) {\n    super(props)\n    this.state = {\n      ww: 0,\n      optimal: null,\n      grid_canvas: null,\n      mode: 'light',\n      grid: 'hide',\n      showing_posts: 25,\n    }\n    this.setSize = this.setSize.bind(this)\n    this.setSize = debounce(this.setSize, 100)\n  }\n\n  setSize() {\n    let canvas = document.createElement('canvas')\n    let ctx = canvas.getContext('2d')\n    ctx.font = `normal ${font_size}px Inter`\n    let width = ctx.measureText(\n      'thousand writers. With over a million people from various fields working'\n    ).width\n    this.setState(\n      {\n        ww: window.innerWidth,\n        wh: window.innerHeight,\n        optimal: width + font_size * line_height,\n        // optimal: 633.50244140625,\n      },\n      () => {}\n    )\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.setSize)\n    this.setSize()\n\n    let mode_value = localStorage.getItem('mode') || 'light'\n    let grid_value = localStorage.getItem('grid') || 'hide'\n\n    let canvas = document.createElement('canvas')\n    this.setState({ grid_canvas: canvas, mode: mode_value, grid: grid_value })\n  }\n\n  render() {\n    let { ww, wh, optimal, mode, grid, grid_canvas, showing_posts } = this.state\n    const { Component, pageProps } = this.props\n    const { pathname } = this.props.router\n\n    let is_post = pathname.startsWith('/posts/')\n\n    let ogrem = font_size * line_height\n    let afs = font_size\n\n    let font_ratio = optimal / font_size\n    if (ww - ogrem < optimal) {\n      let aspect_font = (ww - ogrem) / font_ratio\n      if (aspect_font > font_min) {\n        afs = aspect_font\n      } else {\n        afs = font_min\n      }\n    }\n\n    ogrem = afs * line_height\n\n    let divisions = 4\n\n    let target_width = optimal / divisions\n    let columns = Math.floor((ww - ogrem) / target_width)\n    let column_width = (ww - ogrem) / columns\n\n    let offset = 0\n    let even = columns % 2 === 0\n    if (!even) {\n      columns = columns - 1\n      offset = column_width / 2\n    }\n\n    let ratio = column_width / target_width\n\n    let optim_width = column_width * divisions\n    let optim_center_left =\n      (columns / 2 - divisions / 2) * column_width + offset\n\n    let stacked = false\n    // TODO rethink stacked\n    if (columns < divisions) {\n      offset = 0\n      columns = divisions\n      column_width = (ww - ogrem) / divisions\n      optim_width = column_width * divisions\n      optim_center_left = 0\n      // grem = grem / 2\n      ratio = 1\n      stacked = true\n    }\n\n    // Adjust grem\n    let fs = afs * ratio\n    let grem = fs * line_height\n\n    let center_text = {\n      width: optim_width,\n      marginLeft: optim_center_left,\n    }\n    let ofsn = {\n      fontSize: afs,\n      lineHeight: line_height,\n    }\n    // font-size normal\n    let fsn = {\n      fontSize: fs,\n      lineHeight: line_height,\n    }\n\n    let logo_stroke = 'black'\n    let ocap = ogrem * (2048 / 2816)\n    let cap = grem * (2048 / 2816)\n\n    let grid_props = {\n      grem,\n      ogrem,\n      center_text,\n      afs,\n      fsn,\n      fs,\n      columns,\n      column_width,\n      offset\n    }\n\n    return (\n      <Container>\n        <style jsx global>{`\n          * {\n            box-sizing: border-box;\n          }\n          html {\n            font-family: 'Inter', serif;\n            font-size: ${font_size}px;\n            line-height: ${font_size * line_height}px;\n            text-rendering: optimizelegibility;\n            font-feature-settings: 'kern';\n            font-kerning: normal;\n            font-feature-settings: 'ss02' 1;\n            -webkit-font-smoothing: antialiased;\n            -moz-osx-font-smoothing: grayscale;\n          }\n          body {\n            margin: 0;\n            overflow-x: hidden;\n          }\n          a {\n            color: inherit;\n            text-decoration: none;\n            transition: opacity 0.025s linear;\n          }\n          a:hover {\n            opacity: 0.75;\n          }\n          a.no-hover:hover {\n            opacity: 1;\n          }\n          .hover_box_overlay {\n            opacity: 0;\n            transition: opacity 0.025s linear;\n          }\n          .hover_box:hover .hover_box_overlay {\n            opacity: 1;\n          }\n          a.gray-backer {\n            transition: background 0.05s linear;\n          }\n          a.gray-backer:hover {\n            background: #f3f3f3;\n          }\n        `}</style>\n        <style jsx global>{`\n          html {\n            font-size: ${afs}px;\n            line-height: ${afs * line_height}px;\n          }\n          a,\n          .display-link {\n            background-image: linear-gradient(\n              to right,\n              black 100%,\n              transparent 0%\n            );\n            background-position: 0em calc(${1 + sm}em);\n            background-repeat: repeat-x;\n            background-size: 1em ${sm}em;\n          }\n          a.no-hover {\n            background-image: none;\n          }\n        `}</style>\n\n        {optimal !== null ? (\n          <div>\n            <Header\n              grem={grem}\n              logo_stroke={logo_stroke}\n              cap={cap}\n              fsn={fsn}\n              fs={fs}\n            />\n\n            {is_post ? (\n              <PostLayout pathname={pathname}>\n                <Component {...pageProps} {...grid_props} />\n              </PostLayout>\n            ) : (\n              <Component {...pageProps} {...grid_props} />\n            )}\n          </div>\n        ) : null}\n      </Container>\n    )\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AAXA;AAYA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAJA;AAQA;;;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;AA5NA;AACA;;;;;A","sourceRoot":""}