(window.webpackJsonp=window.webpackJsonp||[]).push([["f31e"],{"45wz":function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",function(){return s}),a.d(t,"default",function(){return c});var r=a("kOwS"),n=a("qNsG"),o=(a("q1tI"),a("E/Ix")),s={title:"Simple Architectures Outperform Complex Ones in Language Modeling",date:"2018-04-25 12:08 -0400",preview_image:"/images/2018/03/param_importance-1522251173209.png",feature:!1,published:!0,post_type:"Newsletter"},i={frontMatter:s},l="wrapper";function c(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(o.b)(l,Object(r.a)({},i,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Are novel, complex, and specialized neural network architectures always better for language modeling? ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://arxiv.org/abs/1708.02182"}),"Recent papers")," have shown otherwise. Language models are used to predict the next token given the preceeding tokens. Most operate at word-level or character-level. Word-level models have large vocabulary sizes (how many words are there in the English language?) compared to character-level models (there are 26 letters in the English language). This means that character-level models require less memory. On the other hand, when processing a sentence, character-level models see a large number of tokens (each character is a token) compared to word-level models. A large number of tokens (long sequence) is harder for neural networks because of the vanishing gradients problem.                                                                      "),Object(o.b)("p",null,"A paper by ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://arxiv.org/abs/1803.08240"}),"Salesforce research")," shows that a properly regulated vanilla recurrent neural network (LSTM or a cheaper counter part QRNN) can achieve state-of-the-art results on both character-level and word-level datasets. The architecture is simple: the model consists of a trainable embedding layer, one or more layers of stacked recurrent neural network, and a softmax classifier. The embedding and softmax classifier layers utilize tied weights, meaning that these two layers share the same weight. To speed up the model (slow because of large vocabulary sizes), a version of adaptive softmax extended to allow for tied weights is used. The network is regularized using DropConnect (generalization of DropOut where the weights, rather than nodes, are set to zero) on the recurrent hidden-to-hidden weight matrices to prevent overfitting on the recurrent connections. This regularization approach does not require any modifications to an RNN's formulation and allows black box RNN implementations to be used. Black box implementations are preferred because they often run faster due to low-level hardware-specific optimizations.                                                                   "),Object(o.b)("p",null,Object(o.b)("img",Object(r.a)({parentName:"p"},{src:"/images/2018/03/param_importance-1522251173209.png",alt:null}))),Object(o.b)("h5",null,"Relative importance of hyperparameters for word-level task on the smaller WikiText-2 dataset using QRNN ",Object(o.b)("a",Object(r.a)({parentName:"h5"},{href:"https://arxiv.org/abs/1803.08240"}),"(image source)")),Object(o.b)("p",null,"In addition to achieving state-of-the-art results, experiments with the above model show that QRNN is less successful than LSTM at character-level tasks, even with substantial hyperparameter tuning. ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://arxiv.org/abs/1611.01576"}),"QRNN")," combines the best of convolutional neural network (CNN) and recurrent neural network (RNN). It allows for parallel computation across both timestep and minibatch dimensions (CNN) while retaining sequential information (RNN). In doing so, it uses a simplified hidden-to-hidden transition function which is element-wise rather than full-matrix multiplication. The authors conjecture that this simplified transition function prevents full communication between hidden units in the RNN, making it less suitable for character-level language models. The experiments on QRNN also show that weight dropout is the most important hyperparameter - the number of layers and dimension sizes matters relatively less. We think the paper is interesting because it: i) confirms that novel and complex is not always better; ii) shows character-level and word-level models are not easily transferable; and iii) attempts to rank hyperparameter importance (useful!)\n"))}c.isMDXComponent=!0},uUw7:function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/posts/2018-04-25-simple-architectures-outperform-complex-ones-in-language-modeling",function(){var e=a("45wz");return{page:e.default||e}}])}},[["uUw7","5d41","9da1"]]]);