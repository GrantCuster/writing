(window.webpackJsonp=window.webpackJsonp||[]).push([["0578"],{"/clz":function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/posts/2017-03-22-prophet",function(){var e=a("3NDt");return{page:e.default||e}}])},"3NDt":function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",function(){return r}),a.d(t,"default",function(){return c});var n=a("kOwS"),o=a("qNsG"),i=(a("q1tI"),a("E/Ix")),r={layout:"post",title:"Taking Prophet for a Spin",date:"2017-03-22 15:30",preview_image:"/images/2017/03/birthforecast.png",feature:!1,author:"Shioulin",author_link:null},s={frontMatter:r},l="wrapper";function c(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(i.b)(l,Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Facebook recently released\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://facebookincubator.github.io/prophet/"}),"Prophet"),", a general purpose time\nseries forecasting package with both Python and R interfaces."),Object(i.b)("p",null,"Python and R already have plenty of time series forecasting options, so why is\nProphet interesting? It caught our eye because the backend is implemented in\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"http://mc-stan.org/"}),"Stan"),", a probabilistic programming language we researched\nin ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"http://blog.fastforwardlabs.com/2017/01/18/new-research-on-probabilistic-programming.html"}),"our most recent\nreport"),"."),Object(i.b)("p",null,"This choice means that Prophet offers many of the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"http://blog.fastforwardlabs.com/2017/01/30/the-algorithms-behind-probabilistic-programming.html"}),"advantages of the Bayesian\napproach"),".\nIn particular, the models have a simple, interpretable structure (seasonality)\non which prior analyst knowledge can be imposed, and forecasts include\nconfidence intervals derived from the full posterior distribution, which means\nthey offer a data-driven estimate of risk."),Object(i.b)("p",null,"But by keeping the probabilistic programming language in the backend, the\nchoice of Stan becomes an implementation detail to the user, who is probably a\ndata analyst with a time series modeling problem. This user can continue to\nwork entirely in a general purpose language they already know."),Object(i.b)("p",null,"In this post, we take Prophet for a spin, exploring its user interface and\nperformance with a couple of datasets."),Object(i.b)("h2",null,"The model"),Object(i.b)("p",null,"Prophet implements a general purpose time series model suitable for the\nkind of data seen at Facebook. It offers piecewise trends, multiple seasonality\n(day of week, day of year, etc.), and floating holidays."),Object(i.b)("p",null,"Prophet frames the time series forecasting problem as a curve-fitting exercise.\nThe dependent variable is a sum of three components: growth, periodic\nseasonality, and holidays."),Object(i.b)("p",null,"Prophet models nonlinear ",Object(i.b)("strong",{parentName:"p"},"growth")," using a logistic growth model with a\ntime-varying carrying capacity. It models linear growth using a simple\npiecewise constant function. Changepoints (where growth rate is allowed to\nchange) are modeled using a vector of rate adjustments, each corresponding to\na specific point in time. The rate adjustment variable is modeled using a\nLaplace distribution with location parameter of 0. Analysts can specify\nchangepoints by providing specific dates or by adjusting the scale parameter\nassociated with the Laplace distribution. "),Object(i.b)("p",null,"Prophet models ",Object(i.b)("strong",{parentName:"p"},"periodic seasonality")," using a standard Fourier series. For\nyearly and weekly seasonality, the number of approximation terms is 20 and 6\nrespectively. The seasonal component is smoothed with a normal prior. "),Object(i.b)("p",null,"Finally, ",Object(i.b)("strong",{parentName:"p"},"holidays")," are modeled using an indicator function. The indicator\nfunction takes 1 on holidays and is multiplied by a normal smoothing prior."),Object(i.b)("p",null,"For both seasonal and holiday priors, analysts can adjust the spread parameter\nto model how much of the historical seasonal variation is expected in the\nfuture. "),Object(i.b)("h2",null,"Using Prophet"),Object(i.b)("p",null,"The model is specified in ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/facebookincubator/prophet/blob/master/python/stan/unix/prophet_linear_growth.stan"}),"a short Stan\nlisting"),"\nthat gets compiled behind the scenes when the Prophet is first installed. The\nuser need never touch the Stan code, and works with Prophet entirely through\nits Python or R interfaces."),Object(i.b)("p",null,"To demonstrate these interfaces, let's run Prophet on an infamous dataset with\nextremely strong seasonality: ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.esrl.noaa.gov/gmd/ccgg/trends/full.html"}),"atmospheric carbon dioxide as measured on the\nHawaiian volcano of Mauna\nLoa"),"."),Object(i.b)("p",null,"Having prepared a pandas DataFrame ",Object(i.b)("inlineCode",{parentName:"p"},"maunaloa"),", running Prophet is just a couple\nof lines:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"m = Prophet()\nm.fit(maunaloa)\nfuture = m.make_future_dataframe(periods=120, freq='m')\nforecast = m.predict(future)\n")),Object(i.b)("p",null,"This code takes a couple of seconds to run and yields the following forecast:"),Object(i.b)("p",null,Object(i.b)("img",Object(n.a)({parentName:"p"},{src:"/images/2017/03/maunaforecast.png",alt:null}))),Object(i.b)("p",null,"Prophet's simple model is easily able to detect the strong annual periodicity\nand long-term upwards trend. Note that the forecast comes with data-driven\nconfidence intervals for free, a crucial advantage of probabilistic programming\nsystems."),Object(i.b)("p",null,"Prophet also yields simple, interpretable results for the components (date, day\nof week, day of year) of the time series decomposition."),Object(i.b)("p",null,Object(i.b)("img",Object(n.a)({parentName:"p"},{src:"/images/2017/03/maunacomponent.png",alt:null}))),Object(i.b)("p",null,"Notice the weekly component is much smaller than the other two, and likely\nmostly noise. This makes sense; global atmospheric chemistry doesn't vary by day\nof the week! On the other hand, the yearly component shows the seasonal impact\nof northern hemisphere vegetation levels on carbon dioxide levels; the levels\nare higher lower after the summer and higher after winter."),Object(i.b)("h3",null,"Birth data"),Object(i.b)("p",null,"Let's now run Prophet on a more challenging dataset, the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"http://www.mechanicalkern.com/static/birthdates-1968-1988.csv"}),"number of births in\nthe United States by day of the\nyear"),". This\ndataset was ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"http://andrewgelman.com/2012/06/19/slick-time-series-decomposition-of-the-birthdays-data/"}),"analyzed using Gaussian\nProcesses"),"\nand made famous through its appearance on the cover of ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"http://www.stat.columbia.edu/~gelman/book/"}),"Bayesian Data\nAnalysis"),", Andrew Gelman's\ntextbook. It's a dataset with seasonality (both yearly and weekly) and holiday\neffects."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"m = Prophet(changepoint_prior_scale=0.1)\nm.fit(birthdates);\nfuture = m.make_future_dataframe(periods=365)\nforecast = m.predict(future)\n")),Object(i.b)("p",null,"Here we demonstrate Prophet's ability to automatically detect changepoints by\nadjusting the changepoint smoothing parameter. Instead of the default value of\n0.05, we set the changepoint smoothing parameter to be 0.1. This makes the\nresulting forecast more flexible and less smooth, but also more susceptible for\nchasing noise. If we were doing this for real we would of course conduct a\nformal cross-validation to empirically determine the proper value of this\nhyperparameter. "),Object(i.b)("p",null,"Prophet takes about a minute to run on this dataset (black points) and gives\nthe following forecast (blue line). We show here a truncated time series from 1987\nto 1990."),Object(i.b)("p",null,Object(i.b)("img",Object(n.a)({parentName:"p"},{src:"/images/2017/03/birthforecast.png",alt:null}))),Object(i.b)("p",null,"We can see the origin of the almost bimodal distribution of the data in the\ncomponent plots. Prophet finds the strong weekday/weekend variation.\nWe also see the yearly seasonality effects: more births around\nAugust to October. "),Object(i.b)("p",null,Object(i.b)("img",Object(n.a)({parentName:"p"},{src:"/images/2017/03/birthcomponent.png",alt:null}))),Object(i.b)("p",null,"These components are very similar to the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"http://andrewgelman.com/2012/06/19/slick-time-series-decomposition-of-the-birthdays-data/"}),"those found using Gaussian\nProcesses"),".\nThat analysis finds spikes in the number of births on specific days during the\nyear. For example, the number of birth is anomalously low on New Year's day and\nhigh on Valentine's Day. We stopped short of doing this, but these special days\ncould be captured in Prophet as \"holidays\" by defining a indicator variable\nseries that says whether each date covered by the dataset and forecast was/will\nbe a holiday."),Object(i.b)("h2",null,"Advantages of Prophet"),Object(i.b)("p",null,"In our probabilistic programming report we emphasized that the Bayesian\napproach, made simpler by probabilistic languages like Stan and pymc3, allows\ndevelopers and statisticians to quantify the probability of all outcomes and\nnot just determine the most likely prediction. The prior and interpretability make the\nmodels more practical."),Object(i.b)("p",null,"Prophet makes these advantages concrete for a specific use case: forecasting.\nIt makes sensible choices for a general purpose time series modeling function.\nSome flexibility is sacrificed in the modeling choices, but the trade-off is a\ngreat one from the point of view of the intended typical Prophet user. It\nabstracts away the complexity of working with Stan's powerful but somewhat\neccentric interfaces behind idiomatic Python and R APIs, which makes the system\neven easier and quicker for data scientists and analysts to use. Prophet is a\ngreat example of a robust, user-friendly probabilistic programming product."),Object(i.b)("p",null,"If you'd like to learn more about probabilistic programming, please ",Object(i.b)("a",{href:"mailto:contact@fastforwardlabs.com"},"get in touch")," to learn about our\nresearch program."))}c.isMDXComponent=!0}},[["/clz","5d41","9da1"]]]);