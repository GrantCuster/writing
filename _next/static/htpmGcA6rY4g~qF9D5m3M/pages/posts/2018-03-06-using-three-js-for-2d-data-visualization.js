(window.webpackJsonp=window.webpackJsonp||[]).push([["ad9b"],{Hg2l:function(t,e,o){"use strict";o.r(e),o.d(e,"frontMatter",function(){return i}),o.d(e,"default",function(){return c});var a=o("kOwS"),r=o("qNsG"),n=(o("q1tI"),o("E/Ix")),i={layout:"post",title:"Using three.js for 2D data visualization",date:"2018-03-06 10:50",preview_image:"http://blog.fastforwardlabs.com/images/2018/03/Screen_Shot_2018_03_06_at_10_53_16_AM-1520351645421.png",feature:!0,post_type:"Demo",external_url:"https://beta.observablehq.com/@grantcuster/using-three-js-for-2d-data-visualization",author:"Grant",author_link:"https://twitter.com/GrantCuster"},s={frontMatter:i},u="wrapper";function c(t){var e=t.components,o=Object(r.a)(t,["components"]);return Object(n.b)(u,Object(a.a)({},s,o,{components:e,mdxType:"MDXLayout"}),Object(n.b)("p",null,"A code walkthrough of how to use three.js for large 2D data visualizations. Three.js can smoothly render a large number of points in the browser but there are some tricks to making it work for interactive 2D visualizations. This is the guide that I wish I would have had when I built our most recent prototype. It shows how to enable mouse-directed pan and zoom, circular points, and hover interactions. It is presented as an interactive javascript notebook with working code."))}c.isMDXComponent=!0},rwpx:function(t,e,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/posts/2018-03-06-using-three-js-for-2d-data-visualization",function(){var t=o("Hg2l");return{page:t.default||t}}])}},[["rwpx","5d41","9da1"]]]);